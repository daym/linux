Atmel TSS463AA VAN controller Device Tree Bindings
--------------------------------------------------

The first node is a child node of the SPI device tree node.

Required properties:
- compatible: "atmel,tss463aa"
- reg: Chip[select] number.
- interrupts: interrupt specifier for the sole interrupt.
- clock: phandle and clock specifier.
- channels: List of channel configurations.

Example
-------

tss463aa_clock_source: oscillator {
	#clock-cells = <0>;
	compatible = "fixed-clock";
	clock-frequency = <4000000>;
};

van0: tss463aa@1 {
	compatible = "atmel,tss463aa";
	reg = <0>;
	interrupt-parent = <&pio>;
	interrupts = <8 10 IRQ_TYPE_LEVEL_LOW>;
	interrupt-names = "activity";
	spi-max-frequency = <4000000>;
	spi-cpol;
	spi-cpha;
	clocks = <&tss463aa_clock_source>;
	tss463aa,diagnostic-mode=<TSS463AA_DIAGNOSTIC_MODE_RXD0>;
	tss463aa,channels {
		channel@0 {
			tss463aa,listener;
			tss463aa,disable-ack;
			tss463aa,remote-transmission-request;
			tss463aa,idtag=<0>;
			tss463aa,idmask=<0>;
			tss463aa,msgpointer=<0>;
			tss463aa,msglen=<31>;
		};
		channel@1 {
			tss463aa,disable-ack; /* For Reply requests, reception is possible for a short while each. */
			tss463aa,msgpointer=<32>;
			tss463aa,msglen=<31>;
		};
	};
};

Considerations
--------------

The overall design of the driver assumes that each channel can either transmits or receive, not both.  But there is an exception.

This exception are "Reply" request messages.

These are like IPC calls in the sense of there's a request and an immediate reply that is "part" of the logical unit.

These can be sent via a channel that can transmit.  After the "Reply" request message has been transmitted, one message (the response) is allowed to be received on that channel.  After that, receiving on the channel is disabled again.

This is all well and good, but the actual high-level network layer knows nothing about this IPC stuff.  There's the hope it will be somehow possible to keep a serialized ordering of both TX and RX interleaved - that would help.

It's also possible to wait for a "Reply" request ourselves.  This can be done on an "reception" channel.

After that, the client must respond either immediately or with a deferred reply.If he doesn't, the next "Reply" request cannot be waited for.
